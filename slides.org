#+TITLE:    Angular what's new (16.x → 19.x)
#+AUTHOR:   Claudio Marchiori
#+LANGUAGE: it

* Componenti Standalone

In Angular 16 è stata introdotta una nuova tipologia di componenti, le *standalone components*, che offrono un modo più semplice e modulare di sviluppare le applicazioni.
La principale differenza rispetto ai componenti tradizionali è che non necessitano di essere dichiarati all'interno di un modulo *NgModule*. Questo semplifica la struttura e il boilerplate del codice, rendendolo più leggibile e manutenibile.
Un componente standalone dichiara le proprie dipendenze (componenti, direttive e pipe) direttamente tramite la proprietà ~imports~ del decoratore ~@Component~.

**Vantaggi**

  - Eliminazione dei moduli NgModule: struttura più semplice e meno codice.
  - Maggiore modularità: componenti, direttive e pipe più indipendenti e riutilizzabili.
  - Migliore leggibilità e manutenibilità del codice.

** Approccio con moduli (Angular < 16)

#+begin_src typescript
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { MatIconModule } from '@angular/material/icon';
import { MatButtonModule } from '@angular/material/button';
import { MatTooltipModule } from '@angular/material/tooltip';
import { ReactiveFormsModule } from '@angular/forms';
import { FooService } from './foo.service';
import { ButtonComponent } from './button.component';

@NgModule({
  declarations: [ButtonComponent, /* ... */],
  providers: [FooService, /* ... */],
  imports: [
    CommonModule,
    MatIconModule,
    MatButtonModule,
    MatTooltipModule,
    ReactiveFormsModule,
    /* ... */
  ],
  exports: [ButtonComponent, /* ... */]
})
export class ButtonModule { }
#+end_src

** Approccio con componenti standalone (Angular >= 16)

#+begin_src typescript
import { Component, Input } from '@angular/core';
import { CommonModule } from '@angular/common';
import { MatIconModule } from '@angular/material/icon';
import { MatButtonModule } from '@angular/material/button';
import { MatTooltipModule } from '@angular/material/tooltip';
import { ReactiveFormsModule } from '@angular/forms';
import { FooService } from './foo.service';

@Component({
  selector: 'app-button',
  standalone: true, // ← definizione di un componente standalone
  imports: [ // ← Qui si dichiarano le dipendenze
    CommonModule,
    MatIconModule,
    MatButtonModule,
    MatTooltipModule,
    ReactiveFormsModule,
    /* ... */
  ]
  providers: [FooService, /* ... */], // ← Qui si dichiarano i servizi
  template: `
    <button mat-raised-button
            [matTooltip]="tooltip"
            (click)="onClick()">
      <mat-icon>{{ icon }}</mat-icon>
      {{ label }}
    </button>
  `,
  styles: [],
})
export class ButtonComponent {
  @Input() icon!: string;
  @Input() label!: string;
  @Input() tooltip!: string;

  myForm = new FormGroup({
    name: new FormControl('')
  });

  onClick() {
    // Esempio di logica con Reactive Forms
    console.log(this.myForm.value);
  }
}
#+end_src

** Componenti Standalone

Un componente standalone è un componente a tutti gli effetti, con la differenza che viene definito come tale tramite la proprietà ~standalone: true~ nel decoratore.

#+begin_src typescript
import { CommonModule } from '@angular/common';
import { ReactiveFormsModule } from '@angular/forms';

@Component({
  selector: 'app-my-component',
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule, /* ... */]
  template: `
    <p>This is a standalone component!</p>
  `,
  styles: [],
  providers: [],
})
export class MyComponent { }
#+end_src

*** Direttive Standalone

Anche le direttive possono essere definite come standalone, utilizzando la stessa proprietà ~standalone: true~ nel decoratore ~@Directive~.

#+begin_src typescript
@Directive({
  selector: '[appMyAttribute]',
  standalone: true,
  providers: []
})
export class MyAttributeDirective { }
#+end_src

*** Pipe Standalone

Analogamente, anche le pipe possono essere standalone e dichiarate all'interno della sezione ~imports~ del componente che le utilizza.

#+begin_src typescript
@Pipe({
  name: 'myFilter',
  standalone: true
})
export class MyFilterPipe implements PipeTransform {
  transform(value: any, ...args: any[]): any {
    // Logica della pipe
    return value;
  }
}
#+end_src

*** Esempio di utilizzo

In un componente standalone, puoi importare direttamente altri componenti, direttive o pipe standalone:

#+begin_src typescript
import { MyAppComponent } from './my-app.component';
import { MyAttributeDirective } from './my-attribute.directive';
import { MyFilterPipe } from './my-filter.pipe';
import { FooService } from './foo.service';

@Component({
  // ...
  standalone: true,
  imports: [MyAppComponent, MyAttributeDirective, MyFilterPipe],
  providers: [FooService],
  /* ... */
})
export class MyParentComponent { /* ... */ }
#+end_src

** Componenti, direttive e pipe standalone: una distinzione importante

Come abbiamo visto, i componenti standalone offrono un approccio più snello e modulare allo sviluppo in Angular, eliminando la necessità di dichiararli all'interno di un modulo NgModule. Tuttavia, è fondamentale fare una distinzione tra componenti, direttive e pipe standalone:

- *Componenti standalone*: *devono* dichiarare le proprie dipendenze (componenti, direttive e pipe) tramite la proprietà ~imports~ del decoratore ~@Component~. Questo è necessario perché il componente standalone deve sapere quali altri elementi può utilizzare nel suo template e nella sua logica.

- *Direttive e pipe standalone*: *non* necessitano di importare la proprietà ~imports~. Questo perché direttive e pipe, per loro natura, non hanno dipendenze da altri componenti, direttive o pipe. Sono elementi "autonomi" che vengono utilizzati *dai* componenti, ma non ne "importano" altri.

*** Perché questa differenza?

La differenza fondamentale risiede nel ruolo che componenti, direttive e pipe svolgono all'interno dell'applicazione:

- *Componenti*: sono i "mattoni" fondamentali dell'interfaccia utente. Possono contenere altri componenti, utilizzare direttive e pipe, e hanno una logica propria. Per questo motivo, hanno bisogno di "sapere" quali sono le loro dipendenze, e lo fanno tramite ~imports~.

- *Direttive*: sono "*istruzioni*" che modificano il comportamento o l'aspetto degli elementi del DOM. Non "contengono" altri elementi, ma vengono "utilizzate" da essi. Per questo motivo, non hanno bisogno di importare nulla.

- *Pipe*: trasformano i dati in un formato specifico. Anche loro sono "autonome" e non dipendono da altri elementi.

** Retrocompatibilità

Per iniziare a convertire dei componenti contenuti in un modulo in *standalone components* è possibile utilizzare questo approccio conservativo per mantenere la retrocompatibilità:

#+begin_src typescript
import { MyStandaloneAppComponent } from './my-app.component';
import { MyStandaloneAttributeDirective } from './my-attribute.directive';
import { MyFilterPipe } from './my-filter.pipe';

@NgModule({
  declarations: [MyFilterPipe], // ← la classe MyFilterPipe non è ancora stata dichiarata standalone
  imports: [ // ← questi componenti sono stati resi standalone e vengono importati solo per essere successivamente esportati
    MyStandaloneAppComponent,
    MyStandaloneAttributeDirective,
  ],
  exports: [MyFilterPipe, MyStandaloneAppComponent, MyStandaloneAttributeDirective]
})
export class MyOldModule { /* ... */ }
#+end_src

** Componenti Standalone: addio NgModule?

Con l'avvento dei componenti standalone, i moduli NgModule diventano opzionali. Questo non significa che siano completamente inutili, ma il loro ruolo cambia.

I moduli possono ancora essere utili per:
  - Organizzare il codice in unità logiche più grandi.
  - Raggruppare componenti, direttive e pipe che vengono spesso utilizzati insieme.
  - Fornire configurazioni a livello di modulo (ad esempio, provider di servizi).

Tuttavia, per molte applicazioni, i componenti standalone offrono una soluzione più semplice e diretta, eliminando la necessità di creare moduli per ogni componente.

*** forRoot e forChild: un nuovo approccio

I metodi ~forRoot~ e ~forChild~ erano spesso utilizzati con i moduli per configurare servizi e condividere dati tra componenti in modo gerarchico.
Con i componenti standalone, questo approccio cambia.

*Configurazione di servizi essenziali (HttpClient e Routing):*

- *HttpClient:* Per configurare ~HttpClient~, utilizza la funzione ~provideHttpClient()~ all'interno dell'array ~providers~ del metodo ~bootstrapApplication()~ (nel tuo file ~main.ts~):
  #+begin_src typescript
  import { bootstrapApplication } from '@angular/platform-browser';
  import { AppComponent } from './app/app.component';
  import { provideHttpClient } from '@angular/common/http';

  bootstrapApplication(AppComponent, {
    providers: [
      provideHttpClient(/* ... */)
    ]
  });
  #+end_src

- *Routing:* Per il routing, utilizza la funzione ~provideRouter()~ sempre all'interno dell'array ~providers~ di ~bootstrapApplication()~:
  #+begin_src typescript
  import { bootstrapApplication } from '@angular/platform-browser';
  import { AppComponent } from './app/app.component';
  import { provideRouter } from '@angular/router';
  import { routes } from './app.routes'; // Importa le tue rotte

  bootstrapApplication(AppComponent, {
    providers: [
      provideRouter(routes, withComponentInputBinding(), /* ... */)
    ]
  });
  #+end_src

-----

* Directive Composition API e hostDirectives in Angular

- [[https://angular.dev/guide/directives/directive-composition-api][Guida ufficiale Angular]] ([[https://stackblitz.com/edit/stackblitz-starters-jrxkcahg][Playground]])

A partire da Angular 16, è possibile comporre componenti e direttive in modo più modulare grazie alle *Directive Composition API*.

L'uso principale di ~hostDirectives~ è *sulle direttive* per creare *comportamenti componibili e modulari*.
Questa tecnica permette di *raggruppare più direttive in una sola*, mantenendo il codice più pulito e riutilizzabile.

L'elemento chiave di questa API è la proprietà ~hostDirectives~, che consente di *aggregare direttive standalone* in un componente o in una direttiva (standalone) senza modificarne il template.

*🔹 Vantaggi principali:*
  - *Riutilizzo del codice* → le direttive possono essere condivise tra più componenti senza dichiararle nel template.
  - *Separazione delle responsabilità* → ogni direttiva può gestire una specifica funzionalità senza mescolarsi con la logica del componente.
  - *Mappatura di Input/Output* → consente di rinominare ~@Input~ e ~@Output~ delle direttive per adattarli al contesto del componente.
  - *Leggibilità migliorata:* → il codice è più conciso e focalizzato sulla logica specifica della direttiva "ospitante".

*🔹 Quando usare hostDirectives?*
- *Principalmente nelle direttive*, per creare comportamenti riutilizzabili senza ereditarietà complessa.
- *Nei componenti solo se strettamente necessario*, quando si vuole includere automaticamente una direttiva senza dichiararla nel template.

#+BEGIN_SRC typescript
/* ↓ @Directive */
@Directive({
  selector: '[appAdvancedTooltip]',
  standalone: true,
  hostDirectives: [{ directive: TooltipDirective, inputs: ['message'], outputs: ['onShow'] }]
})
export class AdvancedTooltipDirective {}

/* ↓ @Component */
@Component({
  selector: 'app-loading-button',
  standalone: true,
  template: `<button>Carica</button>`,
  hostDirectives: [{ directive: PositionDirective, inputs: ['someInput'], outputs: ['someOutput'] }]
})
export class LoadingButtonComponent {}
#+END_SRC

** Differenza tra hostDirectives ed ereditarietà classica

L'uso di ~hostDirectives~ *non* fa ereditare i metodi interni della direttiva aggiunta, *a differenza di `extends`* nell'ereditarietà classica.

*📌 Differenza tra `hostDirectives` ed `extends`*
| Caratteristica               | `extends` (Ereditarietà classica) | `hostDirectives` |
|------------------------------|----------------------------------|------------------|
| *Eredita metodi e proprietà protette/private* | ✅ Sì | ❌ No |
| *Eredita input/output* | ❌ No (deve essere ridefinito) | ✅ Sì (se esplicitamente mappato) |
| *Eredita metodi pubblici* | ✅ Sì | ❌ No |
| *Supporta più "estensioni"* | ❌ No (solo una classe base) | ✅ Sì (può aggregare più direttive) |

** Cosa eredita hostDirectives?

- ✔ *Solo ciò che è esplicitamente mappato negli `inputs` e `outputs`*
- ✔ Il comportamento della direttiva (influisce sullo stesso host element)
- ✖ *Non eredita metodi o proprietà pubbliche della direttiva inclusa*

💡 *Se hai bisogno di accedere a metodi della direttiva inclusa, devi ottenere manualmente un riferimento a essa.*

** Esempio: cosa NON viene ereditato
#+BEGIN_SRC typescript
@Directive({
  selector: '[appBase]',
  standalone: true
})
export class BaseDirective {
  @Input() value = 'Base Value';

  logMessage() {
    console.log(`Metodo interno della direttiva che stampa ${this.value}`);
  }
}

@Directive({
  selector: '[appEnhanced]',
  standalone: true,
  hostDirectives: [
    {
      directive: BaseDirective,
      inputs: ['value'] // ← Necessario specificare le inputs se se ne vuole fare uso
    }
  ]
})
export class EnhancedDirective {
  constructor() {} // ← Non è necessario super() nel costruttore

  ngOnInit() {
    this.logMessage(); // ❌ Errore: logMessage() non è disponibile!
  }
}
#+END_SRC

🔴 *Errore:* il metodo ~logMessage()~ non viene ereditato da ~BaseDirective~.

** Come accedere ai metodi di una direttiva inclusa?
Devi *iniettare la direttiva inclusa* manualmente nel costruttore:
#+BEGIN_SRC typescript
@Directive({
  selector: '[appEnhanced]',
  standalone: true,
  hostDirectives: [{ directive: BaseDirective, inputs: ['value'] }]
})
export class EnhancedDirective {
  constructor(private baseDirective: BaseDirective) {}

  ngOnInit() {
    this.baseDirective.logMessage(); // ✅ Funziona!
  }
}
#+END_SRC

👉 Ora ~logMessage()~ è accessibile perché otteniamo un riferimento esplicito a ~BaseDirective~.

*📌 È obbligatorio specificare inputs e outputs?*
No, non è obbligatorio.
Tuttavia, *se non vengono specificati, il componente o la direttiva che utilizza =hostDirectives= non erediterà automaticamente gli input/output della direttiva.*

*🔹 Cosa succede se non vengono dichiarati?*
- Gli input e gli output della direttiva *non saranno accessibili* nel contesto in cui è usata.
- Se il componente o la direttiva tenta di accedere a un input/output non mappato, *Angular non genererà errori*, ma semplicemente ignorerà tali proprietà.

✅ *Esempio senza mapping di inputs/outputs*
#+BEGIN_SRC typescript
@Directive({
  selector: '[appExample]',
  standalone: true,
  hostDirectives: [{ directive: SomeDirective }]
})
export class ExampleDirective {}
#+END_SRC
👉 Qui, ~appExample~ utilizza ~SomeDirective~, *ma non ha accesso ai suoi input/output* perché non sono stati mappati.

** Usare hostDirectives nei componenti

*📌 Quando usare hostDirectives in un componente?*
- Quando si vuole *aggregare direttive* senza doverle dichiarare nel template.
- Quando si ha bisogno di *mappare gli input/output* di una direttiva in modo che siano gestiti direttamente dal componente.
- Per favorire un'architettura basata sulla *composizione anziché l'ereditarietà*.

*❌ Quando *NON* usare hostDirectives in un componente?*
1. *Se la direttiva può essere dichiarata nel template con [myDirective]*
   - Se l'unico motivo per usare =hostDirectives= è evitare di scrivere la direttiva nel template, allora probabilmente *non è necessario*.

2. *Se la direttiva modifica il DOM del componente*
   - =hostDirectives= *non modifica il template*, ma solo i suoi host bindings.
   - Se hai bisogno di cambiare il DOM, usa invece una direttiva strutturale (=*ngIf=, =*ngFor=).

-----

* Lazy-loading Components

- [[https://angular.dev/guide/components/programmatic-rendering#lazy-loading-components][Guida ufficiale Angular]]

A partire da Angular 17, è possibile *caricare dinamicamente i componenti in modo lazy* senza doverli dichiarare manualmente nei moduli o nei componenti host.

*Perché usare il Lazy-Loading dei componenti?*
- ✔ *Migliorare le performance* riducendo il bundle iniziale dell’app.
- ✔ *Evitare dipendenze inutili* quando un componente non è sempre necessario.
- ✔ *Caricare componenti solo quando servono*, ad esempio modali, tabelle avanzate o widget dinamici.

Prima di Angular 17, per creare un componente dinamico si utilizzava =ViewContainerRef= e =ComponentFactoryResolver=, ma ora Angular fornisce un metodo più semplice ed efficiente.

** 🔹 Come caricare un componente in modo lazy
Il metodo chiave è =import()=, che consente di caricare un componente solo quando richiesto.

*✅ Esempio base: caricamento dinamico di un componente*
Supponiamo di avere un *componente pesante*, ad esempio una tabella avanzata, che vogliamo caricare solo quando serve.

Nel componente host, utilizziamo =ViewContainerRef= e il nuovo metodo =viewContainerRef.createComponent()=

#+BEGIN_SRC typescript
/* ↓ Il componente che verrà caricato lazy */
@Component({
  selector: 'app-lazy-table',
  standalone: true,
  template: `<h2>Tabella Lazy</h2>`
})
export class LazyTableComponent {
  @Input() data!: string;
}

/* ↓ Il componente host */
@Component({
  selector: 'app-dashboard',
  standalone: true,
  template: `
    <button (click)="loadTable()">Carica Tabella</button>
    <ng-container #container></ng-container>
  `
})
export class DashboardComponent {
  @ViewChild('container', { read: ViewContainerRef }) container!: ViewContainerRef;

  async loadTable() {
    this.container.clear();

    const { LazyTableComponent } = await import('./lazy-table.component'); // ← Qui viene importato il componente
    const componentRef = this.container.createComponent(LazyTableComponent); // ← Qui viene creato il componente

    componentRef.setInput('data', 'Dati caricati dinamicamente!'); // ← Qui riceve i valori dell'input
  }
}
#+END_SRC

** Conclusione
- *Lazy-loading dei componenti* → permette di caricare dinamicamente elementi solo quando servono.
- *Angular 17+ semplifica il processo* → con =import()= e =createComponent()=.
- *È possibile passare input dinamici* → ai componenti caricati in modo lazy.

-----

* Nuove Lifecycle Hooks in Angular: afterRender, afterNextRender e DestroyRef

Con l’introduzione delle nuove versioni di Angular, sono stati aggiunti nuovi lifecycle hooks che migliorano la gestione del rendering e della distruzione dei componenti. In particolare:

- *afterRender*: viene eseguito *dopo che il template è stato renderizzato e la change detection è completata*.
- *afterNextRender*: viene eseguito *solo una volta dopo il primo rendering del template*.
- *DestroyRef*: una nuova API che semplifica la gestione della pulizia delle risorse senza dover implementare ~OnDestroy~.

*Differenza tra afterRender e afterNextRender*

*Definizione chiara*:

- *afterRender* viene chiamato *dopo ogni rendering del template*, quindi può essere eseguito più volte durante il ciclo di vita del componente, ogni volta che Angular aggiorna il DOM in seguito a un cambiamento dello stato.
- *afterNextRender* viene chiamato *solo una volta, dopo il primo rendering del template*, e non si ripete più per l’intero ciclo di vita del componente.

*Esempio pratico di afterRender e afterNextRender*:

#+BEGIN_SRC typescript
import { Component, effect, afterRender, afterNextRender, Signal, signal } from '@angular/core';

@Component({
  selector: 'app-demo',
  template: `<p>Contatore: {{ count() }}</p>
             <button (click)="increment()">Incrementa</button>`
})
export class DemoComponent {
  count: Signal<number> = signal(0);

  constructor() {
    afterRender(() => {
      console.log('afterRender: Il template è stato aggiornato!');
    });

    afterNextRender(() => {
      console.log('afterNextRender: Questo viene eseguito solo dopo il primo rendering.');
    });
  }

  increment() {
    this.count.set(this.count() + 1);
  }
}
#+END_SRC

** Confronto con i Lifecycle Hooks tradizionali

*Differenze con i precedenti lifecycle hooks*:

| Hook                        | Quando viene eseguito                                                   | Esegue il codice più volte? |
|-----------------------------|------------------------------------------------------------------------|-----------------------------|
| *ngOnInit*                  | Dopo la creazione del componente, prima del primo rendering           | No                          |
| *ngOnChanges*               | Ad ogni modifica degli input bindings                                 | Sì                          |
| *ngAfterContentInit*        | Dopo che il contenuto proiettato (ng-content) è stato inizializzato   | No                          |
| *ngAfterContentChecked*     | Dopo ogni change detection sul contenuto proiettato                   | Sì                          |
| *ngAfterViewInit*           | Dopo che la view e i figli sono stati inizializzati                   | No                          |
| *ngAfterViewChecked*        | Dopo ogni change detection della view                                | Sì                          |
| *afterRender*               | Dopo ogni aggiornamento del template e della change detection         | Sì                          |
| *afterNextRender*           | Solo una volta, dopo il primo rendering del template                 | No                          |

*Esempi di differenze*:

- *ngAfterViewInit* è utile quando bisogna eseguire codice dopo che la view è stata inizializzata, ma viene chiamato solo una volta.
- *afterRender* può essere utile per operazioni che devono avvenire *dopo ogni aggiornamento del DOM*, ad esempio per sincronizzare dati o interagire con librerie esterne.
- *ngAfterViewChecked* si attiva ad ogni change detection, ma può essere inefficiente se non gestito correttamente.
- *afterNextRender* è utile per inizializzazioni che devono avvenire *dopo il primo rendering* e non ripetersi.

** Distruzione dei componenti: DestroyRef e OnDestroy

Prima di Angular 16, la gestione della pulizia delle risorse avveniva con l’implementazione dell’interfaccia ~OnDestroy~:

#+BEGIN_SRC typescript
import { Component, OnDestroy } from '@angular/core';

@Component({
  selector: 'app-demo',
  template: `<p>Componente con OnDestroy</p>`
})
export class DemoComponent implements OnDestroy {
  ngOnDestroy() {
    console.log('Il componente sta per essere distrutto!');
  }
}
#+END_SRC

*Problema*:
Il metodo ~ngOnDestroy()~ richiede di implementare un’interfaccia e può portare a codice boilerplate nei componenti.

*Soluzione: DestroyRef*
Con Angular 16+ possiamo usare ~DestroyRef~ per registrare delle callback da eseguire quando il componente viene distrutto:

#+BEGIN_SRC typescript
import { Component, inject, DestroyRef } from '@angular/core';

@Component({
  selector: 'app-demo',
  template: `<p>Componente con DestroyRef</p>`
})
export class DemoComponent {
  private destroyRef = inject(DestroyRef);

  constructor() {
    this.destroyRef.onDestroy(() => {
      console.log('Il componente sta per essere distrutto con DestroyRef!');
    });
  }
}
#+END_SRC

*Vantaggi di DestroyRef*:
- *Non richiede di implementare OnDestroy*.
- *Può essere usato direttamente nei servizi*, mentre ~ngOnDestroy~ è disponibile solo nei componenti o direttive.
- *Consente una gestione più pulita della distruzione*.

*Esempio pratico con Observable*
Immaginiamo di avere un componente che si iscrive a un ~Observable~:

#+BEGIN_SRC typescript
import { Component, inject, DestroyRef } from '@angular/core';
import { interval, Subscription } from 'rxjs';

@Component({
  selector: 'app-timer',
  template: `<p>Timer attivo...</p>`
})
export class TimerComponent {
  private destroyRef = inject(DestroyRef);
  private subscription: Subscription;

  constructor() {
    this.subscription = interval(1000).subscribe(val => console.log('Tick:', val));

    this.destroyRef.onDestroy(() => {
      console.log('Cleanup: annulliamo la subscription.');
      this.subscription.unsubscribe();
    });
  }
}
#+END_SRC

*Confronto tra ngOnDestroy e DestroyRef*

| Caratteristica                  | OnDestroy       | DestroyRef        |
|----------------------------------|----------------|-------------------|
| Richiede implementazione        | *Sì*           | *No*             |
| Può essere usato nei servizi    | *No*           | *Sì*             |
| Si integra con Dependency Injection | *No*       | *Sì*             |
| Registra più callback           | *No*           | *Sì*             |

---

** Conclusione

- *afterRender*: eseguito *dopo ogni aggiornamento del template*.
- *afterNextRender*: eseguito *una sola volta dopo il primo rendering*.
- *ngOnDestroy*: metodo classico per la pulizia dei componenti.
- *DestroyRef*: API moderna per registrare callback di cleanup in modo più flessibile.

*Quando usare cosa?*
- Usa *afterRender* se vuoi eseguire azioni *dopo ogni aggiornamento del DOM*.
- Usa *afterNextRender* se vuoi un’inizializzazione *solo dopo il primo rendering*.
- Usa *ngOnDestroy* se vuoi seguire il metodo tradizionale.
- Usa *DestroyRef* per un approccio più pulito e moderno.

-----


#+BEGIN_COMMENT
* Signal
* Extra
#+END_COMMENT
